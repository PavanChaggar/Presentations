### A Pluto.jl notebook ###
# v0.14.1

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ╔═╡ dadc259e-9214-11eb-2b38-33b4cdb9e26b
begin
	using DelimitedFiles
	using SparseArrays
	using Statistics
	using PlutoUI
	using SimpleWeightedGraphs
	using LightGraphs
	using DifferentialEquations
	using Turing
	using Plots
	using PlutoUI
	using Base.Threads
	using LinearAlgebra
	Turing.setadbackend(:forwarddiff)
	gr()
	
	md"Loading packages here."
end

# ╔═╡ af9c3535-d247-47a5-a8c3-a80e00af01bf
begin
	include("../scripts/Models/Models.jl");
	include("../scripts/Models/Matrices.jl");
	md"Including some scripts here"
end

# ╔═╡ b442e1b4-920c-11eb-0a77-411787683d43
md"# Mathematical Models of Neurodegeneration
The main aim of the research programme is to investigate Alzheimer's disease. In particular, we are examining the prion hypothesis of Alzheimer's disease, which posits that AD pathology is, in part, generated by two toxic proteins, Amyloid-$\beta$ and $\tau$-protein that propogate through the brain in a prion-like process. 

Mathematical models provide a useful tool for gaining insight into mechanistic dynamics behind complex processes. In our case, we simulate the spread of prion-like proteins using reaction-diffusion processes defined on a graph (connectome). 

We can load a graph similarly to as in the previous script. 
"

# ╔═╡ e04a25d7-dad1-459e-9740-23160790f7ae
md"### Set up"

# ╔═╡ 04360dc6-920e-11eb-3450-ff37ab783adc
md"## Load the Brain Network 

We will load the brain network from 100 subjects who have undergone tractography using FSL. Each subject contains two networks: number of connected streamlines and avergae length of streamlines. These are directed networks and both will be symmetrised as: 

$A_{sym} = \frac{1}{2}(A + A^{T})$

The graph Laplacian is given by: 

$L = D - A$

where D is the degree matrix of the graph. 

On a unit lattice, the negative graph Laplacian is equivalent to a discretised second order derivative. Thus, on a graph it is often used to simulate diffusion processes, much as the Laplacian is used in the continuum setting. To normalise the operator, we use 

$A_{i,j} = \frac{n_{i,j}}{l_{i,j}^2}$ 

I've prepareed some functions to do this. 
"

# ╔═╡ f92933dc-9211-11eb-091c-11c31d59df21
csv_path = "/scratch/oxmbm-shared/Code-Repositories/Connectomes/all_subjects";

# ╔═╡ 6c77c6b6-9215-11eb-1289-5558d371050e
subject_dir = "/scratch/oxmbm-shared/Code-Repositories/Connectomes/standard_connectome/scale1/subjects/";

# ╔═╡ cbae4f5c-9214-11eb-0807-cd37295f37ba
subjects = read_subjects(csv_path);

# ╔═╡ f54ae6e0-9214-11eb-2baa-fba9babd502e
An = mean_connectome(load_connectome(subjects, subject_dir, 100, 83, false));

# ╔═╡ 1e560938-9216-11eb-15fa-4d0e02bff32d
Al = mean_connectome(load_connectome(subjects, subject_dir, 100, 83, true));

# ╔═╡ 7c9b1dfe-9217-11eb-068b-d17b2a1192aa
A = diffusive_weight(An, Al);

# ╔═╡ a79f01a8-9217-11eb-2466-79e51dd4fd98
L = laplacian_matrix(max_norm(A));

# ╔═╡ 05e312f6-9216-11eb-2a63-31aa25bbdd62
md"Now we have an adjacency matrix and a Laplacian matrix and can start to run simulations on networks!"

# ╔═╡ 262a69b8-921d-11eb-30dd-b3f8bcbabeef
md"## Network Atrophy Model 

The simplest model we use -- and is commonly used in the literature -- is  a diffusion model, given by: 

$ \frac{d\mathbf{p}_i}{dt} = -\rho L \mathbf{p}$ 

where $p$ is the toxic protein vector. However, this doesn't sufficiently capture prion dynamics as we desire. Minimally, we extend the model into a reaction-diffusion model given by a discrete Fisher-Kolmogorov–Petrovsky–Piskunov equation:

$\frac{d\mathbf{p}_i}{dt} = -\rho \sum\limits_{j=1}^{N}\mathbf{L}_{ij}^{\omega}\mathbf{p}_j + \alpha \mathbf{p}_i\left(1-\mathbf{p}_i\right)$ 

This simple adds a logistc growth term to the model. Intuitively, this captures some of the desired prion dynamics, e.g. there is a growth term that depends on the protein concentration. In addition to modelling the spread of toxic protein, we'd like to simulate the atrophy that is associated with a increasing protein concentration. We can simple describe this as follows: 

$\frac{d\mathbf{a}_i}{dt} = \beta \mathbf{p}_i (1 - \mathbf{a}_i)$ 

where $\mathbf{a}$ is the atrophy level vector. 

This can obviously be extended to ones desire. Interesting, we can write down reaction rate equations corresponding to prion propogation which can be analyatically simplified into the FKPP model. So, FKPP is a good place to start!"

# ╔═╡ 06f74d20-921f-11eb-3911-e774241dcbd5
function CoupledFKPPandAtrophy(du, u0, p, t; L=L)
    n = Int(length(u0)/2)

    x = u0[1:n]
    y = u0[n+1:2n]
	
    α, β, ρ = p

    du[1:n] .= -ρ * L * x .+ α .* x .* (1.0 .- x)
    du[n+1:2n] .= β * x .* (1.0 .- y)
end

# ╔═╡ 76f1dea6-9242-11eb-37a8-350ddacaadf5
#data = clamp.(Array(datasol) + 0.02 * randn(size(Array(datasol))), 0.0,1.0);
md"Data are hidden here"

# ╔═╡ 537c2a70-9220-11eb-1991-079d887c9277
md"""
ρ = $(@bind ρ Slider(0:0.05:3, show_value=true, default=0.1))

α = $(@bind α Slider(0.1:0.1:5, show_value=true, default=1.0))

β = $(@bind β Slider(0.1:0.1:3, show_value=true, default=1.0))

tf = $(@bind tf Slider(1:1:20, show_value=true, default=10.0))

"""

# ╔═╡ 60eb89f0-921e-11eb-2978-1f90d4769c1f
begin
	p = [α, β, ρ]
	protein = zeros(83)
	protein[[27,68]] .= 0.1;
	u0 = [protein; zeros(83)];
	t_span = (0.0,tf);

	prob = ODEProblem(CoupledFKPPandAtrophy, u0, t_span, p)
	sol = solve(prob, Tsit5())
	datasol = solve(prob, Tsit5(), saveat=tf/5)
end;

# ╔═╡ 20b51026-921f-11eb-2fd0-8f7b3dbd8069
begin 
	plot(sol, vars=(1:83), ylims=(0,1), xlims=(0,tf), legend=false)
	#scatter!(0:tf/5:tf, data[1:83,:]')
	title!("Protein Concentration")r
end

# ╔═╡ 9f0dfa9f-7a12-4f64-9fc4-fcd712aabf68
begin
	plot(sol, vars=(84:166), ylims=(0,1), xlims=(0,tf), legend=false)
	#scatter!(0:tf/5:tf, data[84:end,:]')
	title!("Atrophy")
end

# ╔═╡ Cell order:
# ╟─b442e1b4-920c-11eb-0a77-411787683d43
# ╟─e04a25d7-dad1-459e-9740-23160790f7ae
# ╟─dadc259e-9214-11eb-2b38-33b4cdb9e26b
# ╟─af9c3535-d247-47a5-a8c3-a80e00af01bf
# ╟─04360dc6-920e-11eb-3450-ff37ab783adc
# ╠═f92933dc-9211-11eb-091c-11c31d59df21
# ╠═6c77c6b6-9215-11eb-1289-5558d371050e
# ╠═cbae4f5c-9214-11eb-0807-cd37295f37ba
# ╠═f54ae6e0-9214-11eb-2baa-fba9babd502e
# ╠═1e560938-9216-11eb-15fa-4d0e02bff32d
# ╠═7c9b1dfe-9217-11eb-068b-d17b2a1192aa
# ╠═a79f01a8-9217-11eb-2466-79e51dd4fd98
# ╟─05e312f6-9216-11eb-2a63-31aa25bbdd62
# ╟─262a69b8-921d-11eb-30dd-b3f8bcbabeef
# ╠═06f74d20-921f-11eb-3911-e774241dcbd5
# ╠═60eb89f0-921e-11eb-2978-1f90d4769c1f
# ╟─76f1dea6-9242-11eb-37a8-350ddacaadf5
# ╟─537c2a70-9220-11eb-1991-079d887c9277
# ╠═20b51026-921f-11eb-2fd0-8f7b3dbd8069
# ╠═9f0dfa9f-7a12-4f64-9fc4-fcd712aabf68
